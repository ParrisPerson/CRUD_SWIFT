//
// UserAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class UserAPI {
    /**

     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiUserByIdDelete(_id: Int, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        apiUserByIdDeleteWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - DELETE /api/User/{id}
     
     - parameter _id: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func apiUserByIdDeleteWithRequestBuilder(_id: Int) -> RequestBuilder<Void> {
        var path = "/api/User/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiUserByIdGet(_id: Int, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        apiUserByIdGetWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /api/User/{id}
     
     - parameter _id: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func apiUserByIdGetWithRequestBuilder(_id: Int) -> RequestBuilder<Void> {
        var path = "/api/User/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiUserGet(completion: @escaping ((_ data: [User]?,_ error: Error?) -> Void)) {
        apiUserGetWithRequestBuilder().execute { (response, error) -> Void in
           
            completion(response?.body, error)
            
        }
    }

    open class func apiUserGet2(completion: @escaping ((_ data: [User]?,_ error: Error?) -> Void)) {
        apiUserGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }
    
    /**
     - GET /api/User

     - returns: RequestBuilder<Void> 
     */
    open class func apiUserGetWithRequestBuilder() -> RequestBuilder<[User]> {
        let path = "/api/User"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[User]>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter entity: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiUserPost(payload: UserPost, completion: @escaping ((_ error: Error?) -> Void)) {
        apiUserPostWithRequestBuilder(payload: payload).execute { (response, error) -> Void in
            completion(error)
        }
    }


    /**
     - POST /api/User
     
     - parameter entity: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func apiUserPostWithRequestBuilder(payload: UserPost) -> RequestBuilder<Void> {
        let path = "/api/User"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = payload.encodeToJSON() as? [String:AnyObject]

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter entity: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiUserPut(entity: User? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        apiUserPutWithRequestBuilder(entity: entity).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - PUT /api/User
     
     - parameter entity: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func apiUserPutWithRequestBuilder(entity: User? = nil) -> RequestBuilder<Void> {
        let path = "/api/User"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: entity)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
